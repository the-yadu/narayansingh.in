---
import Layout from '../layouts/Layout.astro';
---

<Layout>
  <div class="bg-white dark:bg-gray-900 text-gray-800 dark:text-white min-h-screen w-full">
    <div class="max-w-4xl mx-auto py-12 px-4">
      <div class="flex flex-col sm:flex-row justify-between items-center gap-4 mb-8">
        <h1 class="text-3xl font-black">Theme Playground</h1>
        
        <select id="theme-selector" class="w-full max-w-xs border border-gray-300 dark:border-gray-700 rounded-md py-2 px-4 bg-white dark:bg-gray-800 text-gray-800 dark:text-white">
          <option disabled>Select Theme</option>
          <option value="light">Light</option>
          <option value="dark">Dark</option>
        </select>
      </div>

      <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
        <!-- Card Component -->
        <div class="bg-gray-100 dark:bg-gray-800 rounded-xl shadow-xl">
          <div class="p-6">
            <h2 class="text-xl font-bold mb-2">Card Component</h2>
            <p>This is a card component using standard Tailwind CSS classes.</p>
            <div class="flex justify-end mt-4 gap-2">
              <button class="bg-primary text-white px-4 py-2 rounded hover:bg-blue-700">Primary</button>
              <button class="bg-secondary text-white px-4 py-2 rounded hover:bg-pink-700">Secondary</button>
            </div>
          </div>
        </div>

        <!-- Alert Component -->
        <div class="bg-blue-500 text-white p-4 rounded-lg flex items-center gap-2">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="stroke-current w-6 h-6"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>
          <span>This is an alert using standard Tailwind classes!</span>
        </div>
      </div>

      <div class="border-t border-b border-gray-200 dark:border-gray-700 my-8 py-2 text-center text-lg font-medium">Button Styles</div>

      <div class="flex flex-wrap gap-2 mb-8">
        <button class="bg-gray-200 dark:bg-gray-700 px-4 py-2 rounded">Default</button>
        <button class="bg-gray-800 text-white dark:bg-gray-600 px-4 py-2 rounded">Neutral</button>
        <button class="bg-primary text-white px-4 py-2 rounded">Primary</button>
        <button class="bg-secondary text-white px-4 py-2 rounded">Secondary</button>
        <button class="bg-accent text-white px-4 py-2 rounded">Accent</button>
        <button class="bg-transparent hover:bg-gray-100 dark:hover:bg-gray-700 px-4 py-2 rounded">Ghost</button>
        <button class="text-blue-500 underline px-4 py-2">Link</button>
      </div>

      <div class="border-t border-b border-gray-200 dark:border-gray-700 my-8 py-2 text-center text-lg font-medium">Text Colors</div>

      <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
        <div class="p-4 bg-gray-100 dark:bg-gray-800 rounded-lg">
          <p class="text-gray-800 dark:text-gray-100">Base Content</p>
          <p class="text-gray-700 dark:text-gray-300">Base Content (Medium)</p>
          <p class="text-gray-500 dark:text-gray-400">Base Content (Light)</p>
        </div>
        <div class="p-4 bg-gray-100 dark:bg-gray-800 rounded-lg">
          <p class="text-primary">Primary</p>
          <p class="text-secondary">Secondary</p>
          <p class="text-accent">Accent</p>
        </div>
        <div class="p-4 bg-gray-100 dark:bg-gray-800 rounded-lg">
          <p class="text-blue-500">Info</p>
          <p class="text-green-500">Success</p>
          <p class="text-yellow-500">Warning</p>
          <p class="text-red-500">Error</p>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  // Theme switcher functionality
  document.addEventListener('DOMContentLoaded', () => {
    const themeSelector = document.getElementById('theme-selector') as HTMLSelectElement;
    
    themeSelector.addEventListener('change', () => {
      const selectedTheme = themeSelector.value;
      
      if (selectedTheme === 'dark') {
        document.documentElement.classList.add('dark');
      } else {
        document.documentElement.classList.remove('dark');
      }
      
      localStorage.setItem('theme', selectedTheme);
    });

    // Set initial value from localStorage if exists
    const savedTheme = localStorage.getItem('theme') || 'light';
    if (savedTheme === 'dark') {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }
    themeSelector.value = savedTheme;
  });
</script>
